Welcome to EDMS's documentation!
================================

Introduction
------------

PyDMS is a document management system specifically designed for the needs of engineering and construction projects to manage the documentation of oil & gas, water treatment, nuclear, solar and wind facilities.

PyDMS offers the following characteristics:

* Management of document and data lists containing thousands of items
* Management of multiple metadata related to engineering, review, schedule, etc.
* Spreadsheet like filtering/search capabilities
* Document and data versioning
* Management of relationships between documents and data

PyDMS is intended to be used on projects where:

* Thousands of documents are generated
* Documents have to be produced, exchanged, reviewed, revised and used all along the project phases by multiple parties (owner/operator, contractors, vendors, partners, authorities, etc.)


Installation
------------

Steps to initialize the project on a local machine::

    $ git clone https://github.com/Talengi/EDMS.git repository
    $ virtualenv venv
    $ source venv/bin/activate
    $ pip install -r repository/requirements/local.txt
    $ cd repository
    $ python EDMS/manage.py syncdb --noinput --settings=EDMS.settings.local
    $ fab runserver


Available fabric commands
-------------------------

Check the list of available commands directly in your shell::

    $ fab -l
    Available commands:

        check      Checks that everything is fine, useful before deploying.
        deploy     Deploys the project against staging.
        docs       Generates sphinx documentation for the project.
        errors     Displays error.log file from staging.
        log        Displays access.log file from staging.
        runserver  Runs the local Django server.
        test       Launches tests for the whole project.


Documentation
-------------

This documentation is generated by sphinx, please edit `docs/index.rst` to add more content and use the `fab docs` command to compile it.


User stories completed
----------------------

* As a Document Controler, I want to browse paginated documents so that I can consult many documents (6000+).
* As a Document Controler, I want to sort documents by column so that I can access to recent documents.
* As a Document Controler, I want to search for documents (globally and per column) so that I can access to a given document or type of document.
* As a Document Controler, I want to create new documents so that I can browse more documents.
* As a Document Controler, I want to upload files to documents so that I can enrich documents.
* As a Document Controler, I want to display document details so that I can check all metadata and download attached files.
* As a Document Controler, I want to upload different revisions of a document's files so that I can track an history of modified files.
* As a Document Controler, I want to create relations between documents so that I can navigate through themes.
* As a Document Controler, I want to bookmark documents so that I can find interesting ones easily.
* As a Document Controler, I want to select many documents so that I can realize batch actions.
* As a Document Controler, I want to download files related to many documents so that I can consult those offline.
* As a Document Controler, I want to filter documents with advanced criteria so that I can access to a specific document.


Colophon
--------

* Django: https://www.djangoproject.com/
* Bootstrap: http://twitter.github.io/bootstrap/
* DataTables: http://www.datatables.net/
* Two Scoops of Django template: https://django.2scoops.org/
* Sphinx: http://sphinx-doc.org/
* Datepicker for Bootstrap: http://www.eyecon.ro/bootstrap-datepicker/
* File upload for Bootstrap: http://jasny.github.io/bootstrap/javascript.html#fileupload
* jQuery UI MultiSelect Widget: http://www.erichynds.com/blog/jquery-ui-multiselect-widget
